#include <iostream>
#include <string>
#include <queue>
#include <unordered_map>
using namespace std;

struct Node
{
    char ch;
    int freq;
    Node* left, * right;
};

// Функция для выделения нового узла дерева
Node* getNode(char ch, int freq, Node* left, Node* right)
{
    Node* node = new Node();

    node->ch = ch;
    node->freq = freq;
    node->left = left;
    node->right = right;

    return node;
}

// Объект сравнения, который используется для упорядочения
struct comp
{
    bool operator()(Node* l, Node* r)
    {
        // элемент с наивысшим приоритетом имеет наименьшую частоту
        return l->freq > r->freq;
    }
};

// Проходит по дереву Хаффмана и сохраняет коды Хаффмана
void encode(Node* root, string str,
    unordered_map<char, string>& huffmanCode)
{
    if (root == nullptr)
        return;

    // Поиск листового узла
    if (!root->left && !root->right) {
        huffmanCode[root->ch] = str;
    }

    encode(root->left, str + "0", huffmanCode);
    encode(root->right, str + "1", huffmanCode);
}

// Проходит по дереву Хаффмана и декодирует закодированную строку
void decode(Node* root, int& index, string str)
{
    if (root == nullptr) {
        return;
    }

    // found a leaf node
    if (!root->left && !root->right)
    {
        cout << root->ch;
        return;
    }

    index++;

    if (str[index] == '0')
        decode(root->left, index, str);
    else
        decode(root->right, index, str);
}

// Строит дерево Хаффмана и декодирует введенный текст
void buildHuffmanTree(string text)
{
    // Считает частоту появления каждого символа и сохраняет его
    unordered_map<char, int> freq;
    for (char ch : text) {
        freq[ch]++;
    }

    // Создаёт приоритетную очередь для хранения активных узлов в дереве Хаффмана

    priority_queue<Node*, vector<Node*>, comp> pq;

    // Создаёт листовой узел для каждого символа и добавляет его в приоритетную очередь.
    for (auto pair : freq) {
        pq.push(getNode(pair.first, pair.second, nullptr, nullptr));
    }

    // Делает до тех пор, пока в очереди не будет более одного узла
    while (pq.size() != 1)
    {
        // Удаляет два узла с наивысшим приоритетом
        // самая низкая частота из очереди
        Node* left = pq.top(); pq.pop();
        Node* right = pq.top();	pq.pop();

        // Создаёт новый внутренний узел с этими двумя узлами
        // как дети и с частотой, равной сумме
        // частот двух узлов. Добавляет новый узел
        // в приоритетную очередь.
        int sum = left->freq + right->freq;
        pq.push(getNode('\0', sum, left, right));
    }

    // хранит указатель на корень дерева Хаффмана
    Node* root = pq.top();

    // проходит по дереву Хаффмана и сохраняет коды Хаффмана
    // Также печатает их
    unordered_map<char, string> huffmanCode;
    encode(root, "", huffmanCode);

    cout << "Huffman Codes are :\n" << '\n';
    for (auto pair : huffmanCode) {
        cout << pair.first << " " << pair.second << '\n';
    }

    cout << "\nOriginal string was :\n" << text << '\n';

    // выводит закодированную строку
    string str = "";
    for (char ch : text) {
        str += huffmanCode[ch];
    }

    cout << "\nEncoded string is :\n" << str << '\n';

    //снова проходит по дереву Хаффмана и на этот раз декодирует закодированную строку
    int index = -1;
    cout << "\nDecoded string is: \n";
    while (index < (int)str.size() - 2) {
        decode(root, index, str);
    }
}

int main()
{
    setlocale(LC_ALL, "Russian");
    string text = "Я люблю питсу";

    buildHuffmanTree(text);

    return 0;
}
